{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ANNEPAGA ANVESH\\\\Downloads\\\\project-bolt-sb1-snoa6zdp\\\\springbott\\\\project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CourseList from './CourseList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [userRatings, setUserRatings] = useState({}); // Store the user ratings\n  const [suitableCourses, setSuitableCourses] = useState([]); // Initialize as an empty array\n\n  useEffect(() => {\n    // Fetch recommendations based on user ratings\n    const fetchRecommendedCourses = async () => {\n      const response = await fetch('http://localhost:8081/api/recommendations', {\n        method: 'POST',\n        body: JSON.stringify(userRatings),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n\n      // Ensure the response is an array\n      if (Array.isArray(data)) {\n        setSuitableCourses(data); // Correctly update the state\n      } else {\n        console.error('Response is not an array');\n      }\n    };\n    if (Object.keys(userRatings).length > 0) {\n      fetchRecommendedCourses();\n    }\n  }, [userRatings]); // Re-fetch whenever the ratings change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(CourseList, {\n      courses: [] // Your list of courses\n      ,\n      userRatings: userRatings,\n      suitableCourses: suitableCourses,\n      onRatingChange: (id, rating) => setUserRatings(prev => ({\n        ...prev,\n        [id]: rating\n      })),\n      onCourseSelect: course => console.log(course)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"nbfTsndVNHgrAFbW/HY+Bd319/M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","CourseList","jsxDEV","_jsxDEV","App","_s","userRatings","setUserRatings","suitableCourses","setSuitableCourses","fetchRecommendedCourses","response","fetch","method","body","JSON","stringify","headers","data","json","Array","isArray","console","error","Object","keys","length","className","children","courses","onRatingChange","id","rating","prev","onCourseSelect","course","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ANNEPAGA ANVESH/Downloads/project-bolt-sb1-snoa6zdp/springbott/project/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CourseList from './CourseList';\n\nconst App = () => {\n  const [userRatings, setUserRatings] = useState({}); // Store the user ratings\n  const [suitableCourses, setSuitableCourses] = useState([]); // Initialize as an empty array\n\n  useEffect(() => {\n    // Fetch recommendations based on user ratings\n    const fetchRecommendedCourses = async () => {\n      const response = await fetch('http://localhost:8081/api/recommendations', {\n        method: 'POST',\n        body: JSON.stringify(userRatings),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const data = await response.json();\n\n      // Ensure the response is an array\n      if (Array.isArray(data)) {\n        setSuitableCourses(data); // Correctly update the state\n      } else {\n        console.error('Response is not an array');\n      }\n    };\n\n    if (Object.keys(userRatings).length > 0) {\n      fetchRecommendedCourses();\n    }\n  }, [userRatings]); // Re-fetch whenever the ratings change\n\n  return (\n    <div className=\"App\">\n      <CourseList\n        courses={[]} // Your list of courses\n        userRatings={userRatings}\n        suitableCourses={suitableCourses}\n        onRatingChange={(id, rating) => setUserRatings(prev => ({ ...prev, [id]: rating }))}\n        onCourseSelect={(course) => console.log(course)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5DC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,uBAAuB,GAAG,MAAAA,CAAA,KAAY;MAC1C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,WAAW,CAAC;QACjCW,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;MAElC;MACA,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;QACvBT,kBAAkB,CAACS,IAAI,CAAC,CAAC,CAAC;MAC5B,CAAC,MAAM;QACLI,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;MAC3C;IACF,CAAC;IAED,IAAIC,MAAM,CAACC,IAAI,CAACnB,WAAW,CAAC,CAACoB,MAAM,GAAG,CAAC,EAAE;MACvChB,uBAAuB,CAAC,CAAC;IAC3B;EACF,CAAC,EAAE,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEnB,oBACEH,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBzB,OAAA,CAACF,UAAU;MACT4B,OAAO,EAAE,EAAG,CAAC;MAAA;MACbvB,WAAW,EAAEA,WAAY;MACzBE,eAAe,EAAEA,eAAgB;MACjCsB,cAAc,EAAEA,CAACC,EAAE,EAAEC,MAAM,KAAKzB,cAAc,CAAC0B,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE,CAACF,EAAE,GAAGC;MAAO,CAAC,CAAC,CAAE;MACpFE,cAAc,EAAGC,MAAM,IAAKb,OAAO,CAACc,GAAG,CAACD,MAAM;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACnC,EAAA,CAzCID,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AA2CT,eAAeA,GAAG;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}